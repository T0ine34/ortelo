
# #################################################################################################
#                                               SETUP
# #################################################################################################

# =========================================== settings ============================================
image: node:21-alpine3.18 # all jobs will use this image unless specified otherwise


# =========================================== variables ===========================================

variables:
  IMAGE_NAME: s3a01/$CI_COMMIT_REF_SLUG   # image tag is the branch name ex: s3a01/main
  IMAGE_TAG: $CI_COMMIT_SHA               # other tags can be created on specific events, like the creation of a release (size: 40 chars)
  VOLUME_NAME: s3a01_data                 # name of the volume to mount in the container, allowing data persistence between container restarts
  CONTAINER_NAME: s3a01_container         # name of the container, used to stop and remove the container before deploying a new version


# ========================================= stages order ==========================================

stages:
  - component-test
  - system-test
  - build
  - deploy



# #################################################################################################
#                                             TEMPLATES
# #################################################################################################



# ============================================= tests =============================================


# -------------------------------------------- common ---------------------------------------------

.test-common: &test-common #this template is used to run tests
  rules:
    - changes:
        - .gitlab-ci.yml
  stage: component-test
  before_script:
    - apk add --no-cache make
    - npm install

# ------------------------------------------- component -------------------------------------------

.test-component: &test-component #this template is used to run component tests
  <<: *test-common


# -------------------------------------------- system --------------------------------------------

.test-system: &test-system #this template is used to run system tests
  <<: *test-common


# ============================================= build =============================================

.build: &build #this template is used to build the docker image
  rules:
    - if: $CI_COMMIT_BRANCH == "main"
  stage: build
  image: docker:stable


# ============================================= deploy ============================================

.deploy: &deploy #this template is used to deploy the docker image
  rules:
    - if: $CI_COMMIT_BRANCH == "main"
  stage: deploy




# #################################################################################################
#                                               JOBS
# #################################################################################################



# ============================================= tests =============================================

# ------------------------------------------ no category ------------------------------------------

html-tests: #this job test if the html files are conform to the w3c validator
  rules:
    - changes:
        - public/**/*.html
        - .gitlab-ci.yml
  stage: component-test
  image: python:3.11-alpine3.18
  before_script:
    - python -m pip install --upgrade pip
    - python -m pip install requests
    - python -m pip install unidecode
  script:
    - python test/html-tests.py public


# ------------------------------------------- component -------------------------------------------

server-tests: #this job run unit tests for the server
  <<: *test-component
  rules:
    - changes:
        - server_modules/**/*
        - test/server/**/*
        - test/server.js
  script:
    - make server-test

client-tests: #this job run unit tests for the client
  <<: *test-component
  rules:
    - changes:
        - public/**/*
        - test/client/**/*
        - test/client.js
  script:
    - make client-test

# -------------------------------------------- system --------------------------------------------



# ============================================= build =============================================

docker-image-build:
  <<: *build
  before_script:
    - apk add --no-cache make
    - apk add --no-cache python3
    - apk add --no-cache py3-pip
    - pip3 install json5
    - docker login -u $DOCKER_LOGIN -p $DOCKER_PASSWORD
  script:
    - make games
    - docker build -t $IMAGE_NAME:$IMAGE_TAG -t $IMAGE_NAME:latest .
    - docker push $IMAGE_NAME:$IMAGE_TAG
    - docker push $IMAGE_NAME:latest


# ============================================= deploy =============================================

vps-deploy:
  <<: *deploy
  before_script:
    - apk add --no-cache sshpass
    - apk add --no-cache openssh-client
    - apk add --no-cache python3
    - apk add --no-cache py3-pip
    - pip3 install json5
  script:
    - apk add --no-cache sshpass
    - apk add --no-cache openssh-client
    - sshpass -p $VPS_PASSWORD ssh -o StrictHostKeyChecking=no root@lila.vps.boxtoplay.com "docker stop $CONTAINER_NAME || true && docker rm $CONTAINER_NAME || true"
    - sshpass -p $VPS_PASSWORD ssh -o StrictHostKeyChecking=no root@lila.vps.boxtoplay.com "docker run -d -p 5000:3000 --name $CONTAINER_NAME -v $VOLUME_NAME:/data $IMAGE_NAME:$IMAGE_TAG"
